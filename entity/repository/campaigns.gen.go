// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bwastartup/entity/model"
)

func newCampaign(db *gorm.DB, opts ...gen.DOOption) campaign {
	_campaign := campaign{}

	_campaign.campaignDo.UseDB(db, opts...)
	_campaign.campaignDo.UseModel(&model.Campaign{})

	tableName := _campaign.campaignDo.TableName()
	_campaign.ALL = field.NewAsterisk(tableName)
	_campaign.ID = field.NewInt32(tableName, "id")
	_campaign.UserID = field.NewInt32(tableName, "user_id")
	_campaign.Name = field.NewString(tableName, "name")
	_campaign.ShortDescription = field.NewString(tableName, "short_description")
	_campaign.Description = field.NewString(tableName, "description")
	_campaign.Perks = field.NewString(tableName, "perks")
	_campaign.BackerCount = field.NewInt32(tableName, "backer_count")
	_campaign.GoalAmount = field.NewInt32(tableName, "goal_amount")
	_campaign.CurrentAmount = field.NewInt32(tableName, "current_amount")
	_campaign.Slug = field.NewString(tableName, "slug")
	_campaign.CreatedAt = field.NewTime(tableName, "created_at")
	_campaign.UpdatedAt = field.NewTime(tableName, "updated_at")

	_campaign.fillFieldMap()

	return _campaign
}

type campaign struct {
	campaignDo campaignDo

	ALL              field.Asterisk
	ID               field.Int32
	UserID           field.Int32
	Name             field.String
	ShortDescription field.String
	Description      field.String
	Perks            field.String
	BackerCount      field.Int32
	GoalAmount       field.Int32
	CurrentAmount    field.Int32
	Slug             field.String
	CreatedAt        field.Time
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (c campaign) Table(newTableName string) *campaign {
	c.campaignDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c campaign) As(alias string) *campaign {
	c.campaignDo.DO = *(c.campaignDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *campaign) updateTableName(table string) *campaign {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.UserID = field.NewInt32(table, "user_id")
	c.Name = field.NewString(table, "name")
	c.ShortDescription = field.NewString(table, "short_description")
	c.Description = field.NewString(table, "description")
	c.Perks = field.NewString(table, "perks")
	c.BackerCount = field.NewInt32(table, "backer_count")
	c.GoalAmount = field.NewInt32(table, "goal_amount")
	c.CurrentAmount = field.NewInt32(table, "current_amount")
	c.Slug = field.NewString(table, "slug")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *campaign) WithContext(ctx context.Context) *campaignDo { return c.campaignDo.WithContext(ctx) }

func (c campaign) TableName() string { return c.campaignDo.TableName() }

func (c campaign) Alias() string { return c.campaignDo.Alias() }

func (c campaign) Columns(cols ...field.Expr) gen.Columns { return c.campaignDo.Columns(cols...) }

func (c *campaign) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *campaign) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["id"] = c.ID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["name"] = c.Name
	c.fieldMap["short_description"] = c.ShortDescription
	c.fieldMap["description"] = c.Description
	c.fieldMap["perks"] = c.Perks
	c.fieldMap["backer_count"] = c.BackerCount
	c.fieldMap["goal_amount"] = c.GoalAmount
	c.fieldMap["current_amount"] = c.CurrentAmount
	c.fieldMap["slug"] = c.Slug
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c campaign) clone(db *gorm.DB) campaign {
	c.campaignDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c campaign) replaceDB(db *gorm.DB) campaign {
	c.campaignDo.ReplaceDB(db)
	return c
}

type campaignDo struct{ gen.DO }

func (c campaignDo) Debug() *campaignDo {
	return c.withDO(c.DO.Debug())
}

func (c campaignDo) WithContext(ctx context.Context) *campaignDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c campaignDo) ReadDB() *campaignDo {
	return c.Clauses(dbresolver.Read)
}

func (c campaignDo) WriteDB() *campaignDo {
	return c.Clauses(dbresolver.Write)
}

func (c campaignDo) Session(config *gorm.Session) *campaignDo {
	return c.withDO(c.DO.Session(config))
}

func (c campaignDo) Clauses(conds ...clause.Expression) *campaignDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c campaignDo) Returning(value interface{}, columns ...string) *campaignDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c campaignDo) Not(conds ...gen.Condition) *campaignDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c campaignDo) Or(conds ...gen.Condition) *campaignDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c campaignDo) Select(conds ...field.Expr) *campaignDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c campaignDo) Where(conds ...gen.Condition) *campaignDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c campaignDo) Order(conds ...field.Expr) *campaignDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c campaignDo) Distinct(cols ...field.Expr) *campaignDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c campaignDo) Omit(cols ...field.Expr) *campaignDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c campaignDo) Join(table schema.Tabler, on ...field.Expr) *campaignDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c campaignDo) LeftJoin(table schema.Tabler, on ...field.Expr) *campaignDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c campaignDo) RightJoin(table schema.Tabler, on ...field.Expr) *campaignDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c campaignDo) Group(cols ...field.Expr) *campaignDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c campaignDo) Having(conds ...gen.Condition) *campaignDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c campaignDo) Limit(limit int) *campaignDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c campaignDo) Offset(offset int) *campaignDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c campaignDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *campaignDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c campaignDo) Unscoped() *campaignDo {
	return c.withDO(c.DO.Unscoped())
}

func (c campaignDo) Create(values ...*model.Campaign) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c campaignDo) CreateInBatches(values []*model.Campaign, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c campaignDo) Save(values ...*model.Campaign) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c campaignDo) First() (*model.Campaign, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Campaign), nil
	}
}

func (c campaignDo) Take() (*model.Campaign, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Campaign), nil
	}
}

func (c campaignDo) Last() (*model.Campaign, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Campaign), nil
	}
}

func (c campaignDo) Find() ([]*model.Campaign, error) {
	result, err := c.DO.Find()
	return result.([]*model.Campaign), err
}

func (c campaignDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Campaign, err error) {
	buf := make([]*model.Campaign, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c campaignDo) FindInBatches(result *[]*model.Campaign, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c campaignDo) Attrs(attrs ...field.AssignExpr) *campaignDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c campaignDo) Assign(attrs ...field.AssignExpr) *campaignDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c campaignDo) Joins(fields ...field.RelationField) *campaignDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c campaignDo) Preload(fields ...field.RelationField) *campaignDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c campaignDo) FirstOrInit() (*model.Campaign, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Campaign), nil
	}
}

func (c campaignDo) FirstOrCreate() (*model.Campaign, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Campaign), nil
	}
}

func (c campaignDo) FindByPage(offset int, limit int) (result []*model.Campaign, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c campaignDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c campaignDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c campaignDo) Delete(models ...*model.Campaign) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *campaignDo) withDO(do gen.Dao) *campaignDo {
	c.DO = *do.(*gen.DO)
	return c
}

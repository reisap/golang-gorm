// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bwastartup/model/entity"
)

func newTransactions_table(db *gorm.DB, opts ...gen.DOOption) transactions_table {
	_transactions_table := transactions_table{}

	_transactions_table.transactions_tableDo.UseDB(db, opts...)
	_transactions_table.transactions_tableDo.UseModel(&entity.Transactions_table{})

	tableName := _transactions_table.transactions_tableDo.TableName()
	_transactions_table.ALL = field.NewAsterisk(tableName)
	_transactions_table.ID = field.NewInt32(tableName, "id")
	_transactions_table.CampaignID = field.NewInt32(tableName, "campaign_id")
	_transactions_table.UserID = field.NewInt32(tableName, "user_id")
	_transactions_table.Amount = field.NewInt32(tableName, "amount")
	_transactions_table.Status = field.NewString(tableName, "status")
	_transactions_table.Code = field.NewString(tableName, "code")
	_transactions_table.CreatedAt = field.NewTime(tableName, "created_at")
	_transactions_table.UpdatedAt = field.NewTime(tableName, "updated_at")

	_transactions_table.fillFieldMap()

	return _transactions_table
}

type transactions_table struct {
	transactions_tableDo

	ALL        field.Asterisk
	ID         field.Int32
	CampaignID field.Int32
	UserID     field.Int32
	Amount     field.Int32
	Status     field.String
	Code       field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (t transactions_table) Table(newTableName string) *transactions_table {
	t.transactions_tableDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transactions_table) As(alias string) *transactions_table {
	t.transactions_tableDo.DO = *(t.transactions_tableDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transactions_table) updateTableName(table string) *transactions_table {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.CampaignID = field.NewInt32(table, "campaign_id")
	t.UserID = field.NewInt32(table, "user_id")
	t.Amount = field.NewInt32(table, "amount")
	t.Status = field.NewString(table, "status")
	t.Code = field.NewString(table, "code")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *transactions_table) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transactions_table) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["campaign_id"] = t.CampaignID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["amount"] = t.Amount
	t.fieldMap["status"] = t.Status
	t.fieldMap["code"] = t.Code
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t transactions_table) clone(db *gorm.DB) transactions_table {
	t.transactions_tableDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transactions_table) replaceDB(db *gorm.DB) transactions_table {
	t.transactions_tableDo.ReplaceDB(db)
	return t
}

type transactions_tableDo struct{ gen.DO }

type ITransactions_tableDo interface {
	gen.SubQuery
	Debug() ITransactions_tableDo
	WithContext(ctx context.Context) ITransactions_tableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransactions_tableDo
	WriteDB() ITransactions_tableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransactions_tableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransactions_tableDo
	Not(conds ...gen.Condition) ITransactions_tableDo
	Or(conds ...gen.Condition) ITransactions_tableDo
	Select(conds ...field.Expr) ITransactions_tableDo
	Where(conds ...gen.Condition) ITransactions_tableDo
	Order(conds ...field.Expr) ITransactions_tableDo
	Distinct(cols ...field.Expr) ITransactions_tableDo
	Omit(cols ...field.Expr) ITransactions_tableDo
	Join(table schema.Tabler, on ...field.Expr) ITransactions_tableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransactions_tableDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITransactions_tableDo
	Group(cols ...field.Expr) ITransactions_tableDo
	Having(conds ...gen.Condition) ITransactions_tableDo
	Limit(limit int) ITransactions_tableDo
	Offset(offset int) ITransactions_tableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactions_tableDo
	Unscoped() ITransactions_tableDo
	Create(values ...*entity.Transactions_table) error
	CreateInBatches(values []*entity.Transactions_table, batchSize int) error
	Save(values ...*entity.Transactions_table) error
	First() (*entity.Transactions_table, error)
	Take() (*entity.Transactions_table, error)
	Last() (*entity.Transactions_table, error)
	Find() ([]*entity.Transactions_table, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Transactions_table, err error)
	FindInBatches(result *[]*entity.Transactions_table, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Transactions_table) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransactions_tableDo
	Assign(attrs ...field.AssignExpr) ITransactions_tableDo
	Joins(fields ...field.RelationField) ITransactions_tableDo
	Preload(fields ...field.RelationField) ITransactions_tableDo
	FirstOrInit() (*entity.Transactions_table, error)
	FirstOrCreate() (*entity.Transactions_table, error)
	FindByPage(offset int, limit int) (result []*entity.Transactions_table, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransactions_tableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t transactions_tableDo) Debug() ITransactions_tableDo {
	return t.withDO(t.DO.Debug())
}

func (t transactions_tableDo) WithContext(ctx context.Context) ITransactions_tableDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transactions_tableDo) ReadDB() ITransactions_tableDo {
	return t.Clauses(dbresolver.Read)
}

func (t transactions_tableDo) WriteDB() ITransactions_tableDo {
	return t.Clauses(dbresolver.Write)
}

func (t transactions_tableDo) Session(config *gorm.Session) ITransactions_tableDo {
	return t.withDO(t.DO.Session(config))
}

func (t transactions_tableDo) Clauses(conds ...clause.Expression) ITransactions_tableDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transactions_tableDo) Returning(value interface{}, columns ...string) ITransactions_tableDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transactions_tableDo) Not(conds ...gen.Condition) ITransactions_tableDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transactions_tableDo) Or(conds ...gen.Condition) ITransactions_tableDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transactions_tableDo) Select(conds ...field.Expr) ITransactions_tableDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transactions_tableDo) Where(conds ...gen.Condition) ITransactions_tableDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transactions_tableDo) Order(conds ...field.Expr) ITransactions_tableDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transactions_tableDo) Distinct(cols ...field.Expr) ITransactions_tableDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transactions_tableDo) Omit(cols ...field.Expr) ITransactions_tableDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transactions_tableDo) Join(table schema.Tabler, on ...field.Expr) ITransactions_tableDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transactions_tableDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITransactions_tableDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transactions_tableDo) RightJoin(table schema.Tabler, on ...field.Expr) ITransactions_tableDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transactions_tableDo) Group(cols ...field.Expr) ITransactions_tableDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transactions_tableDo) Having(conds ...gen.Condition) ITransactions_tableDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transactions_tableDo) Limit(limit int) ITransactions_tableDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transactions_tableDo) Offset(offset int) ITransactions_tableDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transactions_tableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactions_tableDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transactions_tableDo) Unscoped() ITransactions_tableDo {
	return t.withDO(t.DO.Unscoped())
}

func (t transactions_tableDo) Create(values ...*entity.Transactions_table) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transactions_tableDo) CreateInBatches(values []*entity.Transactions_table, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transactions_tableDo) Save(values ...*entity.Transactions_table) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transactions_tableDo) First() (*entity.Transactions_table, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Transactions_table), nil
	}
}

func (t transactions_tableDo) Take() (*entity.Transactions_table, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Transactions_table), nil
	}
}

func (t transactions_tableDo) Last() (*entity.Transactions_table, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Transactions_table), nil
	}
}

func (t transactions_tableDo) Find() ([]*entity.Transactions_table, error) {
	result, err := t.DO.Find()
	return result.([]*entity.Transactions_table), err
}

func (t transactions_tableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Transactions_table, err error) {
	buf := make([]*entity.Transactions_table, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transactions_tableDo) FindInBatches(result *[]*entity.Transactions_table, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transactions_tableDo) Attrs(attrs ...field.AssignExpr) ITransactions_tableDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transactions_tableDo) Assign(attrs ...field.AssignExpr) ITransactions_tableDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transactions_tableDo) Joins(fields ...field.RelationField) ITransactions_tableDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transactions_tableDo) Preload(fields ...field.RelationField) ITransactions_tableDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transactions_tableDo) FirstOrInit() (*entity.Transactions_table, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Transactions_table), nil
	}
}

func (t transactions_tableDo) FirstOrCreate() (*entity.Transactions_table, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Transactions_table), nil
	}
}

func (t transactions_tableDo) FindByPage(offset int, limit int) (result []*entity.Transactions_table, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transactions_tableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transactions_tableDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transactions_tableDo) Delete(models ...*entity.Transactions_table) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transactions_tableDo) withDO(do gen.Dao) *transactions_tableDo {
	t.DO = *do.(*gen.DO)
	return t
}

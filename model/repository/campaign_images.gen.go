// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bwastartup/model/entity"
)

func newCampaignImage(db *gorm.DB, opts ...gen.DOOption) campaignImage {
	_campaignImage := campaignImage{}

	_campaignImage.campaignImageDo.UseDB(db, opts...)
	_campaignImage.campaignImageDo.UseModel(&entity.CampaignImage{})

	tableName := _campaignImage.campaignImageDo.TableName()
	_campaignImage.ALL = field.NewAsterisk(tableName)
	_campaignImage.ID = field.NewInt32(tableName, "id")
	_campaignImage.CampaignID = field.NewInt32(tableName, "campaign_id")
	_campaignImage.FileName = field.NewString(tableName, "file_name")
	_campaignImage.IsPrimary = field.NewInt32(tableName, "is_primary")
	_campaignImage.CreatedAt = field.NewTime(tableName, "created_at")
	_campaignImage.UpdatedAt = field.NewTime(tableName, "updated_at")

	_campaignImage.fillFieldMap()

	return _campaignImage
}

type campaignImage struct {
	campaignImageDo

	ALL        field.Asterisk
	ID         field.Int32
	CampaignID field.Int32
	FileName   field.String
	IsPrimary  field.Int32
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (c campaignImage) Table(newTableName string) *campaignImage {
	c.campaignImageDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c campaignImage) As(alias string) *campaignImage {
	c.campaignImageDo.DO = *(c.campaignImageDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *campaignImage) updateTableName(table string) *campaignImage {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.CampaignID = field.NewInt32(table, "campaign_id")
	c.FileName = field.NewString(table, "file_name")
	c.IsPrimary = field.NewInt32(table, "is_primary")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *campaignImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *campaignImage) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["campaign_id"] = c.CampaignID
	c.fieldMap["file_name"] = c.FileName
	c.fieldMap["is_primary"] = c.IsPrimary
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c campaignImage) clone(db *gorm.DB) campaignImage {
	c.campaignImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c campaignImage) replaceDB(db *gorm.DB) campaignImage {
	c.campaignImageDo.ReplaceDB(db)
	return c
}

type campaignImageDo struct{ gen.DO }

type ICampaignImageDo interface {
	gen.SubQuery
	Debug() ICampaignImageDo
	WithContext(ctx context.Context) ICampaignImageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICampaignImageDo
	WriteDB() ICampaignImageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICampaignImageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICampaignImageDo
	Not(conds ...gen.Condition) ICampaignImageDo
	Or(conds ...gen.Condition) ICampaignImageDo
	Select(conds ...field.Expr) ICampaignImageDo
	Where(conds ...gen.Condition) ICampaignImageDo
	Order(conds ...field.Expr) ICampaignImageDo
	Distinct(cols ...field.Expr) ICampaignImageDo
	Omit(cols ...field.Expr) ICampaignImageDo
	Join(table schema.Tabler, on ...field.Expr) ICampaignImageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICampaignImageDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICampaignImageDo
	Group(cols ...field.Expr) ICampaignImageDo
	Having(conds ...gen.Condition) ICampaignImageDo
	Limit(limit int) ICampaignImageDo
	Offset(offset int) ICampaignImageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICampaignImageDo
	Unscoped() ICampaignImageDo
	Create(values ...*entity.CampaignImage) error
	CreateInBatches(values []*entity.CampaignImage, batchSize int) error
	Save(values ...*entity.CampaignImage) error
	First() (*entity.CampaignImage, error)
	Take() (*entity.CampaignImage, error)
	Last() (*entity.CampaignImage, error)
	Find() ([]*entity.CampaignImage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CampaignImage, err error)
	FindInBatches(result *[]*entity.CampaignImage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.CampaignImage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICampaignImageDo
	Assign(attrs ...field.AssignExpr) ICampaignImageDo
	Joins(fields ...field.RelationField) ICampaignImageDo
	Preload(fields ...field.RelationField) ICampaignImageDo
	FirstOrInit() (*entity.CampaignImage, error)
	FirstOrCreate() (*entity.CampaignImage, error)
	FindByPage(offset int, limit int) (result []*entity.CampaignImage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICampaignImageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c campaignImageDo) Debug() ICampaignImageDo {
	return c.withDO(c.DO.Debug())
}

func (c campaignImageDo) WithContext(ctx context.Context) ICampaignImageDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c campaignImageDo) ReadDB() ICampaignImageDo {
	return c.Clauses(dbresolver.Read)
}

func (c campaignImageDo) WriteDB() ICampaignImageDo {
	return c.Clauses(dbresolver.Write)
}

func (c campaignImageDo) Session(config *gorm.Session) ICampaignImageDo {
	return c.withDO(c.DO.Session(config))
}

func (c campaignImageDo) Clauses(conds ...clause.Expression) ICampaignImageDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c campaignImageDo) Returning(value interface{}, columns ...string) ICampaignImageDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c campaignImageDo) Not(conds ...gen.Condition) ICampaignImageDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c campaignImageDo) Or(conds ...gen.Condition) ICampaignImageDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c campaignImageDo) Select(conds ...field.Expr) ICampaignImageDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c campaignImageDo) Where(conds ...gen.Condition) ICampaignImageDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c campaignImageDo) Order(conds ...field.Expr) ICampaignImageDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c campaignImageDo) Distinct(cols ...field.Expr) ICampaignImageDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c campaignImageDo) Omit(cols ...field.Expr) ICampaignImageDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c campaignImageDo) Join(table schema.Tabler, on ...field.Expr) ICampaignImageDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c campaignImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICampaignImageDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c campaignImageDo) RightJoin(table schema.Tabler, on ...field.Expr) ICampaignImageDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c campaignImageDo) Group(cols ...field.Expr) ICampaignImageDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c campaignImageDo) Having(conds ...gen.Condition) ICampaignImageDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c campaignImageDo) Limit(limit int) ICampaignImageDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c campaignImageDo) Offset(offset int) ICampaignImageDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c campaignImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICampaignImageDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c campaignImageDo) Unscoped() ICampaignImageDo {
	return c.withDO(c.DO.Unscoped())
}

func (c campaignImageDo) Create(values ...*entity.CampaignImage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c campaignImageDo) CreateInBatches(values []*entity.CampaignImage, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c campaignImageDo) Save(values ...*entity.CampaignImage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c campaignImageDo) First() (*entity.CampaignImage, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CampaignImage), nil
	}
}

func (c campaignImageDo) Take() (*entity.CampaignImage, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CampaignImage), nil
	}
}

func (c campaignImageDo) Last() (*entity.CampaignImage, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CampaignImage), nil
	}
}

func (c campaignImageDo) Find() ([]*entity.CampaignImage, error) {
	result, err := c.DO.Find()
	return result.([]*entity.CampaignImage), err
}

func (c campaignImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CampaignImage, err error) {
	buf := make([]*entity.CampaignImage, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c campaignImageDo) FindInBatches(result *[]*entity.CampaignImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c campaignImageDo) Attrs(attrs ...field.AssignExpr) ICampaignImageDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c campaignImageDo) Assign(attrs ...field.AssignExpr) ICampaignImageDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c campaignImageDo) Joins(fields ...field.RelationField) ICampaignImageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c campaignImageDo) Preload(fields ...field.RelationField) ICampaignImageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c campaignImageDo) FirstOrInit() (*entity.CampaignImage, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CampaignImage), nil
	}
}

func (c campaignImageDo) FirstOrCreate() (*entity.CampaignImage, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CampaignImage), nil
	}
}

func (c campaignImageDo) FindByPage(offset int, limit int) (result []*entity.CampaignImage, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c campaignImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c campaignImageDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c campaignImageDo) Delete(models ...*entity.CampaignImage) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *campaignImageDo) withDO(do gen.Dao) *campaignImageDo {
	c.DO = *do.(*gen.DO)
	return c
}

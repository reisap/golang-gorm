// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bwastartup/model/entity"
)

func newCampaign(db *gorm.DB, opts ...gen.DOOption) campaign {
	_campaign := campaign{}

	_campaign.campaignDo.UseDB(db, opts...)
	_campaign.campaignDo.UseModel(&entity.Campaign{})

	tableName := _campaign.campaignDo.TableName()
	_campaign.ALL = field.NewAsterisk(tableName)
	_campaign.ID = field.NewInt32(tableName, "id")
	_campaign.UserID = field.NewInt32(tableName, "user_id")
	_campaign.Name = field.NewString(tableName, "name")
	_campaign.ShortDescription = field.NewString(tableName, "short_description")
	_campaign.Description = field.NewString(tableName, "description")
	_campaign.Perks = field.NewString(tableName, "perks")
	_campaign.BackerCount = field.NewInt32(tableName, "backer_count")
	_campaign.GoalAmount = field.NewInt32(tableName, "goal_amount")
	_campaign.CurrentAmount = field.NewInt32(tableName, "current_amount")
	_campaign.Slug = field.NewString(tableName, "slug")
	_campaign.CreatedAt = field.NewTime(tableName, "created_at")
	_campaign.UpdatedAt = field.NewTime(tableName, "updated_at")

	_campaign.fillFieldMap()

	return _campaign
}

type campaign struct {
	campaignDo

	ALL              field.Asterisk
	ID               field.Int32
	UserID           field.Int32
	Name             field.String
	ShortDescription field.String
	Description      field.String
	Perks            field.String
	BackerCount      field.Int32
	GoalAmount       field.Int32
	CurrentAmount    field.Int32
	Slug             field.String
	CreatedAt        field.Time
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (c campaign) Table(newTableName string) *campaign {
	c.campaignDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c campaign) As(alias string) *campaign {
	c.campaignDo.DO = *(c.campaignDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *campaign) updateTableName(table string) *campaign {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.UserID = field.NewInt32(table, "user_id")
	c.Name = field.NewString(table, "name")
	c.ShortDescription = field.NewString(table, "short_description")
	c.Description = field.NewString(table, "description")
	c.Perks = field.NewString(table, "perks")
	c.BackerCount = field.NewInt32(table, "backer_count")
	c.GoalAmount = field.NewInt32(table, "goal_amount")
	c.CurrentAmount = field.NewInt32(table, "current_amount")
	c.Slug = field.NewString(table, "slug")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *campaign) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *campaign) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["id"] = c.ID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["name"] = c.Name
	c.fieldMap["short_description"] = c.ShortDescription
	c.fieldMap["description"] = c.Description
	c.fieldMap["perks"] = c.Perks
	c.fieldMap["backer_count"] = c.BackerCount
	c.fieldMap["goal_amount"] = c.GoalAmount
	c.fieldMap["current_amount"] = c.CurrentAmount
	c.fieldMap["slug"] = c.Slug
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c campaign) clone(db *gorm.DB) campaign {
	c.campaignDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c campaign) replaceDB(db *gorm.DB) campaign {
	c.campaignDo.ReplaceDB(db)
	return c
}

type campaignDo struct{ gen.DO }

type ICampaignDo interface {
	gen.SubQuery
	Debug() ICampaignDo
	WithContext(ctx context.Context) ICampaignDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICampaignDo
	WriteDB() ICampaignDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICampaignDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICampaignDo
	Not(conds ...gen.Condition) ICampaignDo
	Or(conds ...gen.Condition) ICampaignDo
	Select(conds ...field.Expr) ICampaignDo
	Where(conds ...gen.Condition) ICampaignDo
	Order(conds ...field.Expr) ICampaignDo
	Distinct(cols ...field.Expr) ICampaignDo
	Omit(cols ...field.Expr) ICampaignDo
	Join(table schema.Tabler, on ...field.Expr) ICampaignDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICampaignDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICampaignDo
	Group(cols ...field.Expr) ICampaignDo
	Having(conds ...gen.Condition) ICampaignDo
	Limit(limit int) ICampaignDo
	Offset(offset int) ICampaignDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICampaignDo
	Unscoped() ICampaignDo
	Create(values ...*entity.Campaign) error
	CreateInBatches(values []*entity.Campaign, batchSize int) error
	Save(values ...*entity.Campaign) error
	First() (*entity.Campaign, error)
	Take() (*entity.Campaign, error)
	Last() (*entity.Campaign, error)
	Find() ([]*entity.Campaign, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Campaign, err error)
	FindInBatches(result *[]*entity.Campaign, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Campaign) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICampaignDo
	Assign(attrs ...field.AssignExpr) ICampaignDo
	Joins(fields ...field.RelationField) ICampaignDo
	Preload(fields ...field.RelationField) ICampaignDo
	FirstOrInit() (*entity.Campaign, error)
	FirstOrCreate() (*entity.Campaign, error)
	FindByPage(offset int, limit int) (result []*entity.Campaign, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICampaignDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c campaignDo) Debug() ICampaignDo {
	return c.withDO(c.DO.Debug())
}

func (c campaignDo) WithContext(ctx context.Context) ICampaignDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c campaignDo) ReadDB() ICampaignDo {
	return c.Clauses(dbresolver.Read)
}

func (c campaignDo) WriteDB() ICampaignDo {
	return c.Clauses(dbresolver.Write)
}

func (c campaignDo) Session(config *gorm.Session) ICampaignDo {
	return c.withDO(c.DO.Session(config))
}

func (c campaignDo) Clauses(conds ...clause.Expression) ICampaignDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c campaignDo) Returning(value interface{}, columns ...string) ICampaignDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c campaignDo) Not(conds ...gen.Condition) ICampaignDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c campaignDo) Or(conds ...gen.Condition) ICampaignDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c campaignDo) Select(conds ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c campaignDo) Where(conds ...gen.Condition) ICampaignDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c campaignDo) Order(conds ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c campaignDo) Distinct(cols ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c campaignDo) Omit(cols ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c campaignDo) Join(table schema.Tabler, on ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c campaignDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c campaignDo) RightJoin(table schema.Tabler, on ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c campaignDo) Group(cols ...field.Expr) ICampaignDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c campaignDo) Having(conds ...gen.Condition) ICampaignDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c campaignDo) Limit(limit int) ICampaignDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c campaignDo) Offset(offset int) ICampaignDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c campaignDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICampaignDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c campaignDo) Unscoped() ICampaignDo {
	return c.withDO(c.DO.Unscoped())
}

func (c campaignDo) Create(values ...*entity.Campaign) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c campaignDo) CreateInBatches(values []*entity.Campaign, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c campaignDo) Save(values ...*entity.Campaign) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c campaignDo) First() (*entity.Campaign, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Campaign), nil
	}
}

func (c campaignDo) Take() (*entity.Campaign, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Campaign), nil
	}
}

func (c campaignDo) Last() (*entity.Campaign, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Campaign), nil
	}
}

func (c campaignDo) Find() ([]*entity.Campaign, error) {
	result, err := c.DO.Find()
	return result.([]*entity.Campaign), err
}

func (c campaignDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Campaign, err error) {
	buf := make([]*entity.Campaign, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c campaignDo) FindInBatches(result *[]*entity.Campaign, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c campaignDo) Attrs(attrs ...field.AssignExpr) ICampaignDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c campaignDo) Assign(attrs ...field.AssignExpr) ICampaignDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c campaignDo) Joins(fields ...field.RelationField) ICampaignDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c campaignDo) Preload(fields ...field.RelationField) ICampaignDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c campaignDo) FirstOrInit() (*entity.Campaign, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Campaign), nil
	}
}

func (c campaignDo) FirstOrCreate() (*entity.Campaign, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Campaign), nil
	}
}

func (c campaignDo) FindByPage(offset int, limit int) (result []*entity.Campaign, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c campaignDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c campaignDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c campaignDo) Delete(models ...*entity.Campaign) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *campaignDo) withDO(do gen.Dao) *campaignDo {
	c.DO = *do.(*gen.DO)
	return c
}
